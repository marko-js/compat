$ const colorsArray = ["red", "green", "blue"];
$ const colorCodes = {
  red: "FF0000",
  green: "00FF00",
  blue: "0000FF"
};
$ const listSize = 3;
static function noop() {}
static function evenItemsIterator(items, cb) {
  for (let i = 0; i < items.length; i++) {
    if (i % 2 === 0) {
      cb(items[i]);
    }
  }
}
<div class="array">
  <for|color| of=(colorsArray || [])>
    <li>
      ${color}
    </li>
  </for>
</div>
<div class="array-iterator">
  <for|color| of=(() => {
    const _result = [];
    evenItemsIterator(colorsArray || [], color => _result.push(color));
    return _result;
  })()>
    <li>
      ${color}
    </li>
  </for>
</div>
<div class="array-separator">
  <for|color, _index| of=(colorsArray || [])>
    ${_index ? ", " : ""}
    <li>
      ${color}
    </li>
  </for>
</div>
<div class="array-status-var">
  <for|color, _index2, _all| of=(colorsArray || [])>
    $ const loop = {
      getIndex() {
        return _index2;
      },
      getLength() {
        return _all.length;
      },
      isFirst() {
        return _index2 === 0;
      },
      isLast() {
        return _index2 === _all.length - 1;
      }
    };
    ${color}${loop.getIndex() + 1}) of ${loop.getLength()}
    <if(loop.isFirst())>
      <div on-click(loop.getIndex() === 0 && "handleClick")>
         - FIRST
      </div>
    </if>
    <if(loop.isLast())>
       - LAST
    </if>
    <if(!loop.isLast())>
       - NOT LAST
    </if>
  </for>
</div>
<div class="array-iterator-and-status-var">
  <for|color, _index3| of=(() => {
    const _result2 = [];
    evenItemsIterator(colorsArray || [], color => _result2.push(color));
    return _result2;
  })()>
    ${_index3 ? ", " : ""}
    <li>
      ${color}
    </li>
  </for>
</div>
<div class="array-status-var-and-iterator">
  <for|color, _index4, _all2| of=(() => {
    const _result3 = [];
    evenItemsIterator(colorsArray || [], color => _result3.push(color));
    return _result3;
  })()>
    $ const loop = {
      getIndex() {
        return _index4;
      },
      getLength() {
        return _all2.length;
      },
      isFirst() {
        return _index4 === 0;
      },
      isLast() {
        return _index4 === _all2.length - 1;
      }
    };
    ${color}${loop.getIndex() + 1}) of ${loop.getLength()}
    <if(loop.isFirst())>
       - FIRST
    </if>
    <if(loop.isLast())>
       - LAST
    </if>
  </for>
</div>
<div class="array-status-var-and-separator">
  <for|color, _index5, _all3| of=(colorsArray || [])>
    $ const loop = {
      getIndex() {
        return _index5;
      },
      getLength() {
        return _all3.length;
      },
      isFirst() {
        return _index5 === 0;
      },
      isLast() {
        return _index5 === _all3.length - 1;
      }
    };
    ${_index5 ? ", " : ""}${color}${loop.getIndex() + 1}) of ${loop.getLength()}
    <if(loop.isFirst())>
       - FIRST
    </if>
    <if(loop.isLast())>
       - LAST
    </if>
  </for>
</div>
<div class="array-status-var-and-iterator-and-separator">
  <for|color, _index6, _all4| of=(() => {
    const _result4 = [];
    evenItemsIterator(colorsArray || [], color => _result4.push(color));
    return _result4;
  })()>
    $ const loop = {
      getIndex() {
        return _index6;
      },
      getLength() {
        return _all4.length;
      },
      isFirst() {
        return _index6 === 0;
      },
      isLast() {
        return _index6 === _all4.length - 1;
      }
    };
    ${_index6 ? ", " : ""}${color}${loop.getIndex() + 1}) of ${loop.getLength()}
    <if(loop.isFirst())>
       - FIRST
    </if>
    <if(loop.isLast())>
       - LAST
    </if>
  </for>
</div>
<div class="props">
  <for|color, code| in=colorCodes>
    <li>
      ${color}: #${code}
    </li>
  </for>
</div>
<div class="props-separator">
  <for|[color, code], _index7| of=Object.entries(colorCodes)>
    ${_index7 ? ", " : ""}
    <li>
      ${color}: #${code}
    </li>
  </for>
</div>
<div class="props-status-var">
  <for|[color, code], _index8, _all5| of=Object.entries(colorCodes)>
    $ const loop = {
      getIndex() {
        return _index8;
      },
      getLength() {
        return _all5.length;
      },
      isFirst() {
        return _index8 === 0;
      },
      isLast() {
        return _index8 === _all5.length - 1;
      }
    };
    <li>
      ${color}: #${code}
    </li>
    ${loop.getIndex() + 1}) of ${loop.getLength()}
    <if(loop.isFirst())>
       - FIRST
    </if>
    <if(loop.isLast())>
       - LAST
    </if>
  </for>
</div>
<div class="props-status-var-and-separator">
  <for|[color, code], _index9, _all6| of=Object.entries(colorCodes)>
    $ const loop = {
      getIndex() {
        return _index9;
      },
      getLength() {
        return _all6.length;
      },
      isFirst() {
        return _index9 === 0;
      },
      isLast() {
        return _index9 === _all6.length - 1;
      }
    };
    ${_index9 ? ", " : ""}
    <li>
      ${color}: #${code}
    </li>
    ${loop.getIndex() + 1}) of ${loop.getLength()}
    <if(loop.isFirst())>
       - FIRST
    </if>
    <if(loop.isLast())>
       - LAST
    </if>
  </for>
</div>
<div class="range">
  <for|i| from=0 to=10>
    <li>
      ${i}
    </li>
  </for>
</div>
<div class="statement-basic-increment">
  <for|i| from=0 to=(colorsArray.length - 1)>
    ${i}
  </for>
</div>
<div class="statement-basic-increment-by-2">
  <for|i| from=0 to=listSize step=2>
    ${i}
  </for>
</div>
<div class="statement-missing-declaration">
  $ let i;
  <for|i| from=0 to=listSize step=2>
    ${i}
  </for>
</div>
<div class="statement-backwards-test">
  $ var i = 0;
  <while(colorsArray.length >= i)>
    ${i}
    $ i++;
  </while>
</div>
<div class="statement-iterate-backwards">
  $ var i = colorsArray.length;
  <while(i >= 0)>
    ${i}
    $ i--;
  </while>
</div>
<div class="statement-iterate-backwards-by-2">
  $ var i = listSize;
  <while(i > 0)>
    ${i}
    $ i -= 2;
  </while>
</div>
<div class="statement-multi-declaration">
  $ var i = 0,
    x = 2;
  <while(i < listSize)>
    ${i} ${x}
    $ i++;
  </while>
</div>
<div class="statement-init-expression">
  $ let i = 0;
  $ noop();
  <while(i < listSize)>
    ${i}
    $ i++;
  </while>
</div>
<div class="statement-test-expression">
  $ var i = 0;
  <while(noop())>
    ${i}
    $ i++;
  </while>
</div>
<div class="statement-update-expression">
  $ var i = 0;
  <while(i < listSize)>
    $ i++;
    ${i}
    $ noop();
  </while>
</div>
<div class="statement-update-only">
  $ let i = listSize;
  <while(i--)>
    ${i}
  </while>
</div>